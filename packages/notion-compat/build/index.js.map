{"version":3,"sources":["../src/notion-compat-api.ts","../src/convert-time.ts","../src/convert-color.ts","../src/convert-rich-text.ts","../src/convert-block.ts","../src/convert-page.ts"],"sourcesContent":["import PQueue from 'p-queue'\r\nimport type { Client } from '@notionhq/client'\r\nimport { parsePageId } from 'notion-utils'\r\nimport * as notion from 'notion-types'\r\n\r\nimport * as types from './types'\r\n\r\nimport { convertPage } from './convert-page'\r\n\r\nexport class NotionCompatAPI {\r\n  client: Client\r\n\r\n  constructor(client: Client) {\r\n    this.client = client\r\n  }\r\n\r\n  public async getPage(rawPageId: string): Promise<notion.ExtendedRecordMap> {\r\n    const pageId = parsePageId(rawPageId)\r\n\r\n    const [page, block, children] = await Promise.all([\r\n      this.client.pages.retrieve({ page_id: pageId }),\r\n      this.client.blocks.retrieve({ block_id: pageId }),\r\n      this.getAllBlockChildren(pageId)\r\n    ])\r\n    const { blockMap, blockChildrenMap, pageMap, parentMap } =\r\n      await this.resolvePage(pageId)\r\n\r\n    const recordMap = convertPage({\r\n      pageId,\r\n      blockMap,\r\n      blockChildrenMap,\r\n      pageMap,\r\n      parentMap\r\n    })\r\n\r\n    ;(recordMap as any).raw = {\r\n      page,\r\n      block,\r\n      children\r\n    }\r\n\r\n    return recordMap\r\n  }\r\n\r\n  async resolvePage(\r\n    rootBlockId: string,\r\n    {\r\n      concurrency = 4\r\n    }: {\r\n      concurrency?: number\r\n    } = {}\r\n  ) {\r\n    const blockMap: types.BlockMap = {}\r\n    const pageMap: types.PageMap = {}\r\n    const parentMap: types.ParentMap = {}\r\n    const blockChildrenMap: types.BlockChildrenMap = {}\r\n    const pendingBlockIds = new Set<string>()\r\n    const queue = new PQueue({ concurrency })\r\n\r\n    const processBlock = async (\r\n      blockId: string,\r\n      { shallow = false }: { shallow?: boolean } = {}\r\n    ) => {\r\n      if (!blockId || pendingBlockIds.has(blockId)) {\r\n        return\r\n      }\r\n\r\n      pendingBlockIds.add(blockId)\r\n      queue.add(async () => {\r\n        try {\r\n          let partialBlock = blockMap[blockId]\r\n          if (!partialBlock) {\r\n            partialBlock = await this.client.blocks.retrieve({\r\n              block_id: blockId\r\n            })\r\n            blockMap[blockId] = partialBlock\r\n          }\r\n\r\n          const block = partialBlock as types.Block\r\n          if (block.type === 'child_page') {\r\n            if (!pageMap[blockId]) {\r\n              const partialPage = await this.client.pages.retrieve({\r\n                page_id: blockId\r\n              })\r\n\r\n              pageMap[blockId] = partialPage\r\n\r\n              const page = partialPage as types.Page\r\n              switch (page.parent?.type) {\r\n                case 'page_id':\r\n                  processBlock(page.parent.page_id, {\r\n                    shallow: true\r\n                  })\r\n                  if (!parentMap[blockId]) {\r\n                    parentMap[blockId] = page.parent.page_id\r\n                  }\r\n                  break\r\n\r\n                case 'database_id':\r\n                  processBlock(page.parent.database_id, {\r\n                    shallow: true\r\n                  })\r\n                  if (!parentMap[blockId]) {\r\n                    parentMap[blockId] = page.parent.database_id\r\n                  }\r\n                  break\r\n              }\r\n            }\r\n\r\n            if (blockId !== rootBlockId) {\r\n              // don't fetch children or recurse on subpages\r\n              return\r\n            }\r\n          }\r\n\r\n          if (shallow) {\r\n            return\r\n          }\r\n\r\n          const children = await this.getAllBlockChildren(blockId)\r\n          blockChildrenMap[blockId] = children.map((child) => child.id)\r\n\r\n          for (const child of children) {\r\n            const childBlock = child as types.Block\r\n            const mappedChildBlock = blockMap[child.id] as types.Block\r\n            if (\r\n              !mappedChildBlock ||\r\n              (!mappedChildBlock.type && childBlock.type)\r\n            ) {\r\n              blockMap[child.id] = childBlock\r\n              parentMap[child.id] = blockId\r\n\r\n              const details = childBlock[childBlock.type]\r\n              if (details?.rich_text) {\r\n                const richTextMentions = details.rich_text.filter(\r\n                  (richTextItem) => richTextItem.type === 'mention'\r\n                )\r\n\r\n                for (const richTextMention of richTextMentions) {\r\n                  switch (richTextMention.mention?.type) {\r\n                    case 'page': {\r\n                      const pageId = richTextMention.mention.page.id\r\n                      processBlock(pageId, { shallow: true })\r\n                      break\r\n                    }\r\n\r\n                    case 'database': {\r\n                      const databaseId = richTextMention.mention.database.id\r\n                      processBlock(databaseId, { shallow: true })\r\n                      break\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n\r\n              if (childBlock.type === 'link_to_page') {\r\n                switch (childBlock.link_to_page?.type) {\r\n                  case 'page_id':\r\n                    processBlock(childBlock.link_to_page.page_id, {\r\n                      shallow: true\r\n                    })\r\n                    break\r\n\r\n                  case 'database_id':\r\n                    processBlock(childBlock.link_to_page.database_id, {\r\n                      shallow: true\r\n                    })\r\n                    break\r\n                }\r\n              }\r\n\r\n              if (\r\n                childBlock.has_children &&\r\n                childBlock.type !== 'child_database'\r\n              ) {\r\n                processBlock(childBlock.id)\r\n              }\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.warn('failed resolving block', blockId, err.message)\r\n        } finally {\r\n          pendingBlockIds.delete(blockId)\r\n        }\r\n      })\r\n    }\r\n\r\n    await processBlock(rootBlockId)\r\n    await queue.onIdle()\r\n\r\n    return {\r\n      blockMap,\r\n      blockChildrenMap,\r\n      pageMap,\r\n      parentMap\r\n    }\r\n  }\r\n\r\n  async getAllBlockChildren(blockId: string) {\r\n    let blocks: types.BlockChildren = []\r\n    let cursor: string\r\n\r\n    do {\r\n      console.log('blocks.children.list', { blockId, cursor })\r\n      const res = await this.client.blocks.children.list({\r\n        block_id: blockId,\r\n        start_cursor: cursor\r\n      })\r\n\r\n      blocks = blocks.concat(res.results)\r\n      cursor = res.next_cursor\r\n    } while (cursor)\r\n\r\n    return blocks\r\n  }\r\n}\r\n","export function convertTime(time?: string): number | undefined {\r\n  if (time) {\r\n    try {\r\n      return new Date(time).getTime()\r\n    } catch {\r\n      // ignore invalid time strings\r\n    }\r\n  }\r\n\r\n  return undefined\r\n}\r\n","import * as notion from 'notion-types'\r\n\r\nexport function convertColor(color: string): notion.Color {\r\n  switch (color) {\r\n    case 'green':\r\n      return 'teal'\r\n\r\n    case 'green_background':\r\n      return 'teal_background'\r\n\r\n    default:\r\n      return color as notion.Color\r\n  }\r\n}\r\n","import * as notion from 'notion-types'\r\nimport * as types from './types'\r\n\r\nimport { convertColor } from './convert-color'\r\n\r\nexport function convertRichText(richText: types.RichText): notion.Decoration[] {\r\n  return richText.map(convertRichTextItem).filter(Boolean)\r\n}\r\n\r\nexport function convertRichTextItem(\r\n  richTextItem: types.RichTextItem\r\n): notion.Decoration {\r\n  const subdecorations: notion.SubDecoration[] = []\r\n\r\n  if (richTextItem.annotations.bold) {\r\n    subdecorations.push(['b'])\r\n  }\r\n\r\n  if (richTextItem.annotations.italic) {\r\n    subdecorations.push(['i'])\r\n  }\r\n\r\n  if (richTextItem.annotations.strikethrough) {\r\n    subdecorations.push(['s'])\r\n  }\r\n\r\n  if (richTextItem.annotations.underline) {\r\n    subdecorations.push(['_'])\r\n  }\r\n\r\n  if (richTextItem.annotations.code) {\r\n    subdecorations.push(['c'])\r\n  }\r\n\r\n  if (richTextItem.annotations.color !== 'default') {\r\n    subdecorations.push(['h', convertColor(richTextItem.annotations.color)])\r\n  }\r\n\r\n  const details = richTextItem[richTextItem.type]\r\n  if (details) {\r\n    if (details.link) {\r\n      subdecorations.push(['a', details.link.url])\r\n    }\r\n  }\r\n\r\n  switch (richTextItem.type) {\r\n    case 'text': {\r\n      if (subdecorations.length) {\r\n        return [richTextItem.text.content, subdecorations]\r\n      } else {\r\n        return [richTextItem.text.content]\r\n      }\r\n    }\r\n\r\n    case 'equation':\r\n      if (richTextItem.equation?.expression) {\r\n        subdecorations.unshift(['e', richTextItem.equation.expression])\r\n      }\r\n\r\n      return ['⁍', subdecorations]\r\n\r\n    case 'mention': {\r\n      const { mention } = richTextItem\r\n\r\n      if (mention) {\r\n        switch (mention.type) {\r\n          case 'link_preview':\r\n            // TODO: this should be an eoi, but we don't hae the proper data\r\n            subdecorations.push(['a', mention.link_preview.url])\r\n            break\r\n\r\n          case 'page':\r\n            subdecorations.push(['p', mention.page.id])\r\n            return ['‣', subdecorations]\r\n\r\n          case 'database':\r\n            subdecorations.push(['p', mention.database.id])\r\n            return ['‣', subdecorations]\r\n\r\n          case 'date':\r\n            subdecorations.unshift([\r\n              'd',\r\n              {\r\n                type: 'date', // TODO\r\n                start_date: mention.date.start,\r\n                end_date: mention.date.end,\r\n                time_zone: mention.date.time_zone\r\n              }\r\n            ])\r\n            break\r\n\r\n          case 'user':\r\n            subdecorations.push(['u', mention.user.id])\r\n            break\r\n\r\n          case 'template_mention':\r\n            // TODO\r\n            // subdecorations.push(['m', mention.template_mention.type])\r\n            break\r\n\r\n          default:\r\n            // TODO\r\n            break\r\n        }\r\n      }\r\n\r\n      return [richTextItem.plain_text, subdecorations]\r\n    }\r\n\r\n    default:\r\n      return ['']\r\n  }\r\n}\r\n","import * as notion from 'notion-types'\r\nimport * as types from './types'\r\n\r\nimport { convertTime } from './convert-time'\r\nimport { convertColor } from './convert-color'\r\nimport { convertRichText } from './convert-rich-text'\r\n\r\nexport function convertBlock({\r\n  block: partialBlock,\r\n  children = [],\r\n  pageMap,\r\n  blockMap,\r\n  parentMap\r\n}: {\r\n  block: types.PartialBlock\r\n  children?: string[]\r\n  pageMap?: types.PageMap\r\n  blockMap?: types.BlockMap\r\n  parentMap?: types.ParentMap\r\n}): notion.Block {\r\n  const compatBlock: Partial<notion.BaseBlock> = {\r\n    id: partialBlock.id\r\n  }\r\n\r\n  if (children && children.length) {\r\n    compatBlock.content = children\r\n  }\r\n\r\n  const block = partialBlock as types.Block\r\n  if (!block.type) {\r\n    return compatBlock as notion.Block\r\n  }\r\n\r\n  compatBlock.properties = {}\r\n  compatBlock.format = {}\r\n  compatBlock.type = block.type\r\n  compatBlock.created_time = convertTime(block.created_time)\r\n  compatBlock.last_edited_time = convertTime(block.last_edited_time)\r\n  if (block.created_by) {\r\n    compatBlock.created_by_table = `notion_${block.created_by.object}`\r\n    compatBlock.created_by_id = block.created_by.id\r\n  }\r\n  compatBlock.last_edited_by_table = block.last_edited_by?.object\r\n  compatBlock.last_edited_by_id = block.last_edited_by?.id\r\n  compatBlock.alive = block.archived !== true\r\n\r\n  if (parentMap) {\r\n    const parentId = parentMap[block.id]\r\n\r\n    if (parentId) {\r\n      compatBlock.parent_id = parentId\r\n\r\n      const parentBlock = blockMap?.[parentId] as types.Block\r\n      if (parentBlock) {\r\n        switch (parentBlock.type) {\r\n          case 'child_database':\r\n            compatBlock.parent_table = 'table'\r\n            break\r\n\r\n          case 'child_page':\r\n          // fallthrough\r\n          default:\r\n            compatBlock.parent_table = 'block'\r\n            break\r\n        }\r\n      } else {\r\n        const parentPage = pageMap?.[parentId] as types.Page\r\n\r\n        if (parentPage) {\r\n          compatBlock.parent_table = 'block'\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const blockDetails = block[block.type]\r\n  if (blockDetails) {\r\n    if (blockDetails.rich_text) {\r\n      compatBlock.properties.title = convertRichText(blockDetails.rich_text)\r\n    }\r\n\r\n    if (blockDetails.color) {\r\n      compatBlock.format.block_color = convertColor(blockDetails.color)\r\n    }\r\n\r\n    if (blockDetails.icon) {\r\n      switch (blockDetails.icon.type) {\r\n        case 'emoji':\r\n          compatBlock.format.page_icon = blockDetails.icon.emoji\r\n          break\r\n\r\n        case 'external':\r\n          compatBlock.format.page_icon = blockDetails.icon.external.url\r\n          break\r\n\r\n        case 'file':\r\n          compatBlock.format.page_icon = blockDetails.icon.file.url\r\n          break\r\n      }\r\n    }\r\n\r\n    if (blockDetails.type) {\r\n      switch (blockDetails.type) {\r\n        case 'external':\r\n          compatBlock.properties.source = [[blockDetails.external.url]]\r\n          break\r\n\r\n        case 'file':\r\n          compatBlock.properties.source = [[blockDetails.file.url]]\r\n          break\r\n      }\r\n    }\r\n  }\r\n\r\n  switch (block.type) {\r\n    case 'paragraph':\r\n      compatBlock.type = 'text'\r\n      if (!block.paragraph?.rich_text?.length) {\r\n        delete compatBlock.properties\r\n      }\r\n      break\r\n\r\n    case 'heading_1':\r\n      compatBlock.type = 'header'\r\n      break\r\n\r\n    case 'heading_2':\r\n      compatBlock.type = 'sub_header'\r\n      break\r\n\r\n    case 'heading_3':\r\n      compatBlock.type = 'sub_sub_header'\r\n      break\r\n\r\n    case 'bulleted_list_item':\r\n      compatBlock.type = 'bulleted_list'\r\n      break\r\n\r\n    case 'numbered_list_item':\r\n      compatBlock.type = 'numbered_list'\r\n      break\r\n\r\n    case 'quote':\r\n      // no-op\r\n      break\r\n\r\n    case 'to_do':\r\n      if (block.to_do?.checked) {\r\n        compatBlock.properties.checked = [['Yes']]\r\n      }\r\n      break\r\n\r\n    case 'toggle':\r\n      // no-op\r\n      break\r\n\r\n    case 'code':\r\n      if (block.code.language) {\r\n        compatBlock.properties.language = [[block.code.language]]\r\n      }\r\n      break\r\n\r\n    case 'callout':\r\n      // no-op\r\n      break\r\n\r\n    case 'file':\r\n      // no-op\r\n      break\r\n\r\n    case 'divider':\r\n      // no-op\r\n      break\r\n\r\n    case 'breadcrumb':\r\n      // TODO\r\n      break\r\n\r\n    case 'table_of_contents':\r\n      // no-op\r\n      break\r\n\r\n    case 'column_list':\r\n      // no-op\r\n      break\r\n\r\n    case 'column':\r\n      // no-op\r\n      break\r\n\r\n    case 'bookmark':\r\n      if (block.bookmark.url) {\r\n        compatBlock.properties.link = [[block.bookmark.url]]\r\n      }\r\n\r\n      if (block.bookmark.caption) {\r\n        compatBlock.properties.description = convertRichText(\r\n          block.bookmark.caption\r\n        )\r\n      }\r\n      break\r\n\r\n    case 'link_to_page':\r\n      compatBlock.type = 'alias'\r\n      switch (block.link_to_page?.type) {\r\n        case 'page_id':\r\n          compatBlock.format.alias_pointer = {\r\n            id: block.link_to_page.page_id,\r\n            table: 'block'\r\n          }\r\n          break\r\n\r\n        case 'database_id':\r\n          compatBlock.format.alias_pointer = {\r\n            id: block.link_to_page.database_id,\r\n            table: 'table'\r\n          }\r\n          break\r\n      }\r\n      break\r\n\r\n    case 'child_page': {\r\n      compatBlock.type = 'page'\r\n\r\n      if (pageMap) {\r\n        const page = pageMap[block.id] as types.Page\r\n        if (page) {\r\n          if (page.properties.title) {\r\n            compatBlock.properties.title = convertRichText(\r\n              (page.properties.title as any).title\r\n            )\r\n          }\r\n\r\n          if (page.cover) {\r\n            switch (page.cover.type) {\r\n              case 'external':\r\n                compatBlock.format.page_cover = page.cover.external.url\r\n                break\r\n\r\n              case 'file':\r\n                compatBlock.format.page_cover = page.cover.file.url\r\n                break\r\n            }\r\n\r\n            // TODO\r\n            compatBlock.format.page_cover_position = 0.5\r\n          }\r\n\r\n          if (page.icon) {\r\n            switch (page.icon.type) {\r\n              case 'emoji':\r\n                compatBlock.format.page_icon = page.icon.emoji\r\n                break\r\n\r\n              case 'external':\r\n                compatBlock.format.page_icon = page.icon.external.url\r\n                break\r\n\r\n              case 'file':\r\n                compatBlock.format.page_icon = page.icon.file.url\r\n                break\r\n            }\r\n          }\r\n\r\n          if (page.parent) {\r\n            switch (page.parent.type) {\r\n              case 'workspace':\r\n                compatBlock.parent_table = 'space'\r\n                break\r\n\r\n              case 'database_id':\r\n                compatBlock.parent_table = 'table'\r\n                break\r\n\r\n              case 'page_id':\r\n                compatBlock.parent_table = 'block'\r\n                break\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (block.child_page) {\r\n        if (block.child_page.title) {\r\n          compatBlock.properties.title = [[block.child_page.title]]\r\n        }\r\n      }\r\n\r\n      break\r\n    }\r\n\r\n    case 'template':\r\n      // TODO\r\n      break\r\n\r\n    case 'synced_block':\r\n      if (block.synced_block.synced_from) {\r\n        // TODO: handle block.synced_block.synced_from.type for non-block types\r\n        compatBlock.type = 'transclusion_reference'\r\n        compatBlock.format.transclusion_reference_pointer = {\r\n          id: block.synced_block.synced_from.block_id,\r\n          table: 'block'\r\n        }\r\n      } else {\r\n        compatBlock.type = 'transclusion_container'\r\n      }\r\n      break\r\n\r\n    case 'equation':\r\n      if (block.equation?.expression) {\r\n        compatBlock.properties.title = [[block.equation.expression]]\r\n      }\r\n      break\r\n\r\n    case 'child_database':\r\n      // TODO\r\n      break\r\n\r\n    case 'table':\r\n      if (blockDetails.table_width && blockDetails.table_width > 0) {\r\n        // There is no API to get the column ID. Used the index instead.\r\n        compatBlock.format.table_block_column_order = Array.from(\r\n          { length: blockDetails.table_width },\r\n          (_, i) => '' + i\r\n        )\r\n        compatBlock.format.table_block_column_format =\r\n          compatBlock.format.table_block_column_order.map((order) => {\r\n            return {\r\n              [order]: {\r\n                // TODO: The SimpleTable column has no width and color. API is not supported.\r\n                // width: 155,\r\n                // color:\r\n              }\r\n            }\r\n          })\r\n      }\r\n      if (blockDetails.has_column_header) {\r\n        compatBlock.format.table_block_column_header =\r\n          blockDetails.has_column_header\r\n      }\r\n      if (blockDetails.has_row_header) {\r\n        compatBlock.format.table_block_row_header = blockDetails.has_row_header\r\n      }\r\n      break\r\n\r\n    case 'table_row':\r\n      compatBlock.properties = {\r\n        ...block.table_row?.cells?.map((cell) => convertRichText(cell))\r\n      }\r\n      break\r\n\r\n    case 'pdf':\r\n      // TODO: formatting\r\n      compatBlock.format.block_page_width = true\r\n      compatBlock.format.block_height = '80vh'\r\n      break\r\n\r\n    case 'video': {\r\n      // TODO: formatting\r\n      compatBlock.format.block_page_width = true\r\n      compatBlock.format.block_aspect_ratio = 0.5620608899297423\r\n\r\n      try {\r\n        const url = compatBlock.properties.source?.[0]?.[0]\r\n\r\n        if (!url) break\r\n        const u = new URL(url)\r\n\r\n        switch (u.hostname) {\r\n          case 'loom.com':\r\n          case 'www.loom.com':\r\n            u.pathname = u.pathname.replace(/^\\/share\\//i, '/embed/')\r\n            compatBlock.format.display_source = u.toString()\r\n            break\r\n        }\r\n      } catch {\r\n        // ignore invalid urls\r\n      }\r\n      break\r\n    }\r\n\r\n    case 'embed': {\r\n      // TODO: embedding really needs to use some sort of externaly embed API like\r\n      // embedly or microlinkhq. Currently, many embed use cases will not work or\r\n      // display properly.\r\n      const url = block.embed?.url\r\n\r\n      // TODO: formatting\r\n      compatBlock.format.block_page_width = true\r\n      compatBlock.format.block_height = '30vh'\r\n\r\n      if (url) {\r\n        compatBlock.properties.source = [[url]]\r\n\r\n        try {\r\n          const u = new URL(url)\r\n\r\n          switch (u.hostname) {\r\n            case 'twitter.com':\r\n              compatBlock.type = 'tweet'\r\n              delete compatBlock.format\r\n              break\r\n\r\n            case 'maps.google.com':\r\n              compatBlock.type = 'maps'\r\n              break\r\n\r\n            case 'excalidraw.com':\r\n              compatBlock.type = 'excalidraw'\r\n              break\r\n\r\n            case 'codepen.io':\r\n              compatBlock.type = 'codepen'\r\n              break\r\n\r\n            case 'docs.google.com':\r\n            // fallthrough\r\n            case 'drive.google.com':\r\n              compatBlock.type = 'drive'\r\n\r\n              // TODO: fetch drive_properties\r\n              break\r\n\r\n            case 'figma.com':\r\n              compatBlock.type = 'figma'\r\n              break\r\n\r\n            case 'open.spotify.com':\r\n              if (\r\n                u.pathname.includes('/embed/') ||\r\n                u.pathname.includes('/embed-podcast/')\r\n              ) {\r\n                break\r\n              }\r\n\r\n              if (u.pathname.startsWith('/playlist/')) {\r\n                u.pathname = `/embed${u.pathname}`\r\n              } else if (u.pathname.startsWith('/episode/')) {\r\n                u.pathname = `/embed-podcast${u.pathname}`\r\n              }\r\n\r\n              u.search = ''\r\n              compatBlock.format.display_source = u.toString()\r\n              break\r\n\r\n            case 'airtable.com':\r\n              if (!u.pathname.startsWith('/embed/')) {\r\n                u.pathname = `/embed${u.pathname}`\r\n                compatBlock.format.display_source = u.toString()\r\n              }\r\n              break\r\n\r\n            case 'soundcloud.com':\r\n              // TODO\r\n              break\r\n          }\r\n        } catch {\r\n          // ignore invalid urls\r\n        }\r\n      }\r\n      break\r\n    }\r\n\r\n    case 'image':\r\n      // no-op\r\n      // TODO: handle formatting\r\n      break\r\n\r\n    case 'audio':\r\n      // no-op\r\n      break\r\n\r\n    case 'link_preview':\r\n      // TODO\r\n      break\r\n\r\n    case 'unsupported':\r\n      // no-op\r\n      break\r\n  }\r\n\r\n  return compatBlock as notion.Block\r\n}\r\n","import * as notion from 'notion-types'\r\nimport * as types from './types'\r\n\r\nimport { convertBlock } from './convert-block'\r\n\r\nexport function convertPage({\r\n  pageId,\r\n  blockMap,\r\n  blockChildrenMap,\r\n  pageMap,\r\n  parentMap\r\n}: {\r\n  pageId: string\r\n  blockMap: types.BlockMap\r\n  blockChildrenMap: types.BlockChildrenMap\r\n  pageMap: types.PageMap\r\n  parentMap: types.ParentMap\r\n}): notion.ExtendedRecordMap {\r\n  const compatBlocks = Object.values(blockMap).map((block) =>\r\n    convertBlock({\r\n      block,\r\n      children: blockChildrenMap[block.id],\r\n      pageMap,\r\n      blockMap,\r\n      parentMap\r\n    })\r\n  )\r\n\r\n  const compatPageBlock = convertPageBlock({\r\n    pageId,\r\n    blockMap,\r\n    blockChildrenMap,\r\n    pageMap,\r\n    parentMap\r\n  })\r\n\r\n  const compatPageBlocks = Object.keys(pageMap)\r\n    .filter((id) => id !== pageId)\r\n    .map((id) =>\r\n      convertPageBlock({\r\n        pageId: id,\r\n        blockMap,\r\n        blockChildrenMap,\r\n        pageMap,\r\n        parentMap\r\n      })\r\n    )\r\n\r\n  const compatBlockMap = [\r\n    compatPageBlock,\r\n    ...compatBlocks,\r\n    ...compatPageBlocks\r\n  ].reduce(\r\n    (blockMap, block) => ({\r\n      ...blockMap,\r\n      [block.id]: {\r\n        type: 'reader',\r\n        value: block\r\n      }\r\n    }),\r\n    {}\r\n  )\r\n\r\n  return {\r\n    block: compatBlockMap,\r\n    collection: {},\r\n    collection_view: {},\r\n    collection_query: {},\r\n    signed_urls: {},\r\n    notion_user: {}\r\n  }\r\n}\r\n\r\nexport function convertPageBlock({\r\n  pageId,\r\n  blockMap,\r\n  blockChildrenMap,\r\n  pageMap,\r\n  parentMap\r\n}: {\r\n  pageId: string\r\n  blockMap: types.BlockMap\r\n  blockChildrenMap: types.BlockChildrenMap\r\n  pageMap: types.PageMap\r\n  parentMap: types.ParentMap\r\n}): notion.Block | null {\r\n  const partialPage = pageMap[pageId]\r\n  const page = partialPage as types.Page\r\n\r\n  if (page) {\r\n    const compatPageBlock = convertBlock({\r\n      block: { ...page, type: 'child_page' } as unknown as types.Block,\r\n      children: blockChildrenMap[page.id],\r\n      pageMap,\r\n      blockMap,\r\n      parentMap\r\n    })\r\n\r\n    return compatPageBlock\r\n  }\r\n\r\n  return null\r\n}\r\n"],"mappings":"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","names":[]}